name: Update live trains

on:
  schedule:
    - cron: "*/5 * * * *"     # every 5 minutes
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      TF_USERNAME: ${{ secrets.TF_USERNAME }}
      TF_PASSWORD: ${{ secrets.TF_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install selenium requests

      - name: Install Chromium & chromedriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver
          echo "Chromium version:"
          chromium-browser --version || true
          echo "Chromedriver:"
          chromedriver --version || true

      - name: Login to TrainFinder (get .ASPXAUTH)
        id: login
        run: |
          python - <<'PY'
          import os, sys, time
          from selenium import webdriver
          from selenium.webdriver.common.by import By
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC

          USER = os.environ["TF_USERNAME"]
          PASS = os.environ["TF_PASSWORD"]

          url = "https://trainfinder.otenko.com/home/nextlevel"
          opts = webdriver.ChromeOptions()
          opts.add_argument("--headless=new")
          opts.add_argument("--no-sandbox")
          opts.add_argument("--disable-dev-shm-usage")
          opts.add_argument("--window-size=1200,900")

          driver = webdriver.Chrome(options=opts)
          try:
            driver.get(url)
            # Wait for fields (ids are case-weird on that page)
            u = WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "#useR_name"))
            )
            p = driver.find_element(By.CSS_SELECTOR, "#pasS_word")
            u.clear(); u.send_keys(USER)
            p.clear(); p.send_keys(PASS)

            # Click the green "Log In" div button
            btn = driver.find_element(By.XPATH, "//div[contains(@class,'button-green') and contains(.,'Log In')]")
            btn.click()

            # Wait for auth cookie
            WebDriverWait(driver, 20).until(lambda d: d.get_cookie(".ASPXAUTH") is not None)
            ck = driver.get_cookie(".ASPXAUTH")["value"]
            # Print for next step
            print(f"ASPXAUTH={ck}")
          finally:
            driver.quit()
          PY

      - name: Export cookie to env
        run: |
          CK=$(grep -o 'ASPXAUTH=.*' $GITHUB_STEP_SUMMARY || true)
          if [ -z "$CK" ]; then
            # fallback: read from previous step stdout
            CK=$(echo "${{ steps.login.outputs.stdout }}" | grep -o 'ASPXAUTH=.*' || true)
          fi
          CK=${CK#ASPXAUTH=}
          if [ -z "$CK" ]; then
            echo "Cookie missing"; exit 1
          fi
          echo "TF_AUTH_COOKIE=$CK" >> $GITHUB_ENV

      - name: Run fetch and write trains.json
        run: |
          python update_trains.py

      - name: Commit changes (if any)
        run: |
          if git status --porcelain | grep -q "static/trains.json"; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add static/trains.json
            git commit -m "Auto-update trains.json [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi