name: TrainFinder Auto Fetch

on:
  workflow_dispatch:
  schedule:
    - cron: "*/2 * * * *"  # every 2 minutes for testing (later set to */30 * * * *)

jobs:
  fetch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install requests beautifulsoup4 lxml

      - name: Login & fetch data
        env:
          TRAINFINDER_USERNAME: ${{ secrets.TRAINFINDER_USERNAME }}
          TRAINFINDER_PASSWORD: ${{ secrets.TRAINFINDER_PASSWORD }}
        run: |
          python3 - <<'PY'
          import json, sys, re
          from urllib.parse import urljoin
          import requests
          from bs4 import BeautifulSoup

          BASE = "https://trainfinder.otenko.com/"
          s = requests.Session()
          s.headers.update({
              "User-Agent": "Mozilla/5.0 (X11; Linux x86_64)"
          })

          # --- Step 1: Try login page
          resp = s.get(urljoin(BASE, "Home/NextLevel"), allow_redirects=True)
          soup = BeautifulSoup(resp.text, "lxml")
          form = soup.find("form") or soup

          action = form.get("action") or "Home/NextLevel"
          login_url = urljoin(BASE, action)

          payload = {}
          for i in form.find_all("input"):
              n, v = i.get("name"), i.get("value", "")
              if n: payload[n] = v

          # find username/password fields
          uname = next((k for k in payload if "user" in k.lower() or "email" in k.lower()), "UserName")
          pwd = next((k for k in payload if "pass" in k.lower()), "Password")

          payload[uname] = "${{ secrets.TRAINFINDER_USERNAME }}"
          payload[pwd] = "${{ secrets.TRAINFINDER_PASSWORD }}"

          token = soup.find("input", {"name": "__RequestVerificationToken"})
          if token:
              payload["__RequestVerificationToken"] = token.get("value", "")

          # --- Step 2: Login
          r = s.post(login_url, data=payload)
          if "Logout" not in r.text and "Sign out" not in r.text:
              print("❌ Login failed. Check credentials or page layout.")
              sys.exit(1)
          print("✅ Logged in")

          # --- Step 3: Fetch live trains
          url = urljoin(BASE, "Home/GetViewPortData")
          headers = {"X-Requested-With": "XMLHttpRequest"}
          res = s.post(url, headers=headers)
          try:
              data = res.json()
          except:
              print("❌ Response not JSON:", res.status_code)
              data = {"error": res.text[:200]}

          with open("trains.json", "w") as f:
              json.dump(data, f, indent=2)
          print("✅ trains.json saved")

          PY

      - name: Commit & push trains.json
        run: |
          git config user.name "RailOps Bot"
          git config user.email "bot@railops.local"
          git add trains.json
          git commit -m "Update trains.json" || echo "No changes"
          git push
