import os
import json
import time
import requests
from datetime import datetime

TRAINS_JSON_PATH = os.path.join("static", "trains.json")
TRAINFINDER_URL = "https://trainfinder.otenko.com/Home/GetViewPortData"

# Load cookie from file or environment
with open("cookie.txt", "r") as f:
    cookie_value = f.read().strip()

headers = {
    "Cookie": f".ASPXAUTH={cookie_value}",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
}

def fetch_train_data():
    try:
        response = requests.get(TRAINFINDER_URL, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"Error: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"Exception during request: {e}")
        return None

def transform_data(raw_data):
    trains = []
    for item in raw_data:
        try:
            trains.append({
                "loco": item.get("Loco", "Unknown"),
                "lat": item.get("Lat"),
                "lon": item.get("Lon"),
                "operator": item.get("OperatorName", "Unknown"),
                "status": item.get("Status", "")
            })
        except Exception as e:
            print(f"Error processing item: {e}")
    return trains

def save_trains(trains):
    os.makedirs("static", exist_ok=True)
    with open(TRAINS_JSON_PATH, "w") as f:
        json.dump(trains, f, indent=2)

if __name__ == "__main__":
    print(f"[{datetime.now()}] Fetching train data...")
    raw = fetch_train_data()
    if raw:
        trains = transform_data(raw)
        save_trains(trains)
        print(f"[{datetime.now()}] trains.json updated successfully with {len(trains)} trains.")
    else:
        print("Failed to fetch or parse data.")