name: Update trains.json (TrainFinder live)

on:
  schedule:
    - cron: "*/1 * * * *"   # every minute
  workflow_dispatch: {}     # allow manual run

concurrency:
  group: trainfinder-update
  cancel-in-progress: false

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    env:
      DATA_SITE_NAME: traintracker2-0-data   # change if this name is taken

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: First fetch -> deploy/trains.json
        env:
          TRAINFINDER_VIEWPORT_URL: ${{ secrets.TRAINFINDER_VIEWPORT_URL }}
          TRAINFINDER_ASPXAUTH: ${{ secrets.TRAINFINDER_ASPXAUTH }}
          TRAINFINDER_METHOD: ${{ secrets.TRAINFINDER_METHOD }}
          TRAINFINDER_POST_BODY: ${{ secrets.TRAINFINDER_POST_BODY }}
          TRAINFINDER_HEADERS_JSON: ${{ secrets.TRAINFINDER_HEADERS_JSON }}
          TRAINFINDER_COOKIE_RAW: ${{ secrets.TRAINFINDER_COOKIE_RAW }}
        run: |
          python scripts/update_trains.py

      - name: Wait 30 seconds
        run: sleep 30

      - name: Second fetch -> update file again
        env:
          TRAINFINDER_VIEWPORT_URL: ${{ secrets.TRAINFINDER_VIEWPORT_URL }}
          TRAINFINDER_ASPXAUTH: ${{ secrets.TRAINFINDER_ASPXAUTH }}
          TRAINFINDER_METHOD: ${{ secrets.TRAINFINDER_METHOD }}
          TRAINFINDER_POST_BODY: ${{ secrets.TRAINFINDER_POST_BODY }}
          TRAINFINDER_HEADERS_JSON: ${{ secrets.TRAINFINDER_HEADERS_JSON }}
          TRAINFINDER_COOKIE_RAW: ${{ secrets.TRAINFINDER_COOKIE_RAW }}
        run: |
          python scripts/update_trains.py

      - name: Setup Node + tools
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Netlify CLI + jq
        run: |
          npm i -g netlify-cli
          sudo apt-get update -y && sudo apt-get install -y jq

      - name: Ensure data site exists (create if missing, with team context)
        id: ensure_site
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          DATA_SITE_NAME: ${{ env.DATA_SITE_NAME }}
        run: |
          set -e
          echo "Fetching current user (team context)..."
          USER_JSON=$(netlify api getCurrentUser)
          TEAM_SLUG=$(echo "$USER_JSON" | jq -r '.memberships[0].account.slug')
          TEAM_ID=$(echo "$USER_JSON" | jq -r '.memberships[0].account.id')
          echo "Team slug: $TEAM_SLUG"
          echo "Team id:   $TEAM_ID"

          echo "Looking for existing site named $DATA_SITE_NAME..."
          SITE_JSON=$(netlify api listSites --data '{ "page": 1, "per_page": 1000 }')
          SITE_ID=$(echo "$SITE_JSON" | jq -r '.[] | select(.name=="'"$DATA_SITE_NAME"'") | .id' | head -n1)

          if [ -z "$SITE_ID" ] || [ "$SITE_ID" = "null" ]; then
            echo "No site named $DATA_SITE_NAME. Creating under team $TEAM_SLUG..."
            CREATE_JSON=$(netlify api createSite --data '{ "account_slug": "'"$TEAM_SLUG"'", "name": "'"$DATA_SITE_NAME"'" }')
            SITE_ID=$(echo "$CREATE_JSON" | jq -r '.id')
          else
            echo "Found existing site: $SITE_ID"
          fi

          if [ -z "$SITE_ID" ] || [ "$SITE_ID" = "null" ]; then
            echo "Failed to get or create data site. Check NETLIFY_AUTH_TOKEN." >&2
            exit 1
          fi

          echo "site_id=$SITE_ID" >> "$GITHUB_OUTPUT"
          echo "data_url=https://$DATA_SITE_NAME.netlify.app/trains.json" >> "$GITHUB_OUTPUT"
          echo "Will deploy to: https://$DATA_SITE_NAME.netlify.app/trains.json"

      - name: Deploy trains.json to data site (prod)
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ steps.ensure_site.outputs.site_id }}
        run: |
          netlify deploy --dir deploy --prod --message "auto: $GITHUB_RUN_ID-$GITHUB_RUN_NUMBER"

      - name: Print final data URL
        run: |
          echo "Your data file is here:"
          echo "${{ steps.ensure_site.outputs.data_url }}"
